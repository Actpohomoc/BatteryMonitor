[files]
logfile = '/home/pi/data/log'
summaryfile = '/home/pi/data/summary'
errfile = '/home/pi/data/baterrlog'
hoursummaryfile = '/home/pi/data/hoursummary'
daysummaryfile = '/home/pi/data/daysummary'
monthsummaryfile = '/home/pi/data/monthsummary'
yearsummaryfile = '/home/pi/data/yearsummary'

[logging]
data = "self.printtime+batdata.vbat+batdata.vdelta \
	+batdata.iall+batdata.soctxt+batdata.socadjtxt+str(batdata.pip.rawdat)"

[battery]
name = 'Mikes'
numcells = 15
capacity = 220
overvoltage = 3.600
undervoltage = 2.900
ahloss = 0.10500000000000001
vreset = 51.5  # voltage to reset DOD counter
ireset = 5.0  # current to reset DOD counter
ilowcurrent = 10.0 # C/20 lowcurrent voltage logging current

[Interfaces]
pip = 'pip(92931710100542)' # number in brackets is SN of PIP)
bms = 'bms(LH-SP15S001-P15S-30A)' # string in brackets is harware name, from read command 05
pi = 'pi' # add raspberry pi

[VoltageInputs]
v01 = 'self.bms.rawdat["V01"]'
v02 = 'self.bms.rawdat["V02"]'
v03 = 'self.bms.rawdat["V03"]'
v04 = 'self.bms.rawdat["V04"]'
v05 = 'self.bms.rawdat["V05"]'
v06 = 'self.bms.rawdat["V06"]'
v07 = 'self.bms.rawdat["V07"]'
v08 = 'self.bms.rawdat["V08"]'
v09 = 'self.bms.rawdat["V09"]'
v10 = 'self.bms.rawdat["V10"]'
v11 = 'self.bms.rawdat["V11"]'
v12 = 'self.bms.rawdat["V12"]'
v13 = 'self.bms.rawdat["V13"]'
v14 = 'self.bms.rawdat["V14"]'
v15 = 'self.bms.rawdat["V15"]'

[CurrentInputs]
iin1 = 'self.bms.rawdat["Ibat"]'
iin2 = 'self.pip.rawdat["PVI"]'
iin3 = 'self.current[0]-self.current[1]'

[TemperatureInputs]
tin1='self.bms.rawdat["T1"]'
tin2='self.bms.rawdat["T2"]'

[BalanceFlags]
balf01 = 'self.bms.rawdat["Bal"] & 1'
balf02 = 'self.bms.rawdat["Bal"] >> 1 & 1'
balf03 = 'self.bms.rawdat["Bal"] >> 2 & 1'
balf04 = 'self.bms.rawdat["Bal"] >> 3 & 1'
balf05 = 'self.bms.rawdat["Bal"] >> 4 & 1'
balf06 = 'self.bms.rawdat["Bal"] >> 5 & 1'
balf07 = 'self.bms.rawdat["Bal"] >> 6 & 1'
balf08 = 'self.bms.rawdat["Bal"] >> 7 & 1'
balf09 = 'self.bms.rawdat["Bal"] >> 8 & 1'
balf10 = 'self.bms.rawdat["Bal"] >> 9 & 1'
balf11 = 'self.bms.rawdat["Bal"] >> 10 & 1'
balf12 = 'self.bms.rawdat["Bal"] >> 11 & 1'
balf13 = 'self.bms.rawdat["Bal"] >> 12 & 1'
balf14 = 'self.bms.rawdat["Bal"] >> 13 & 1'
balf15 = 'self.bms.rawdat["Bal"] >> 14 & 1'

[Status]
chargestate = "self.pip.rawdat['ChgStat']"

[sampling]
sampletime = 10
samplesav = 1

[calibrate]
currentgain = [-0.01, -1.2, 1.0]
currentoffset = [-0.2, -0.3, 0.0]
batvgain = 1
measured = [0.0, 3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0, 24.0, 27.0, 30.0, 33.0, 36.0, 39.0, 42.0, 45.0]
displayed = [0.0, 3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0, 24.0, 27.0, 30.0, 33.0, 36.0, 39.0, 42.0, 45.0]
measureddelta = [ 0.0, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000]
displayeddelta = [ 0.0, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000]
delta = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

[alarms]
# each alarm has five attributes, the first is the alarm initialisation code
# if the second attribute test is true the third attribute will be executed
# if the fourth attribute is true the fith attribute will be executed
#overv = ['pass', \
#	'self.test=batdata.maxcellv>3.60', \
#	'batdata.pip.setchargevs(blkv=48.0,fltv=48.0)', \
#	'self.test=batdata.maxcellv<3.40', \
#	'batdata.pip.resetchargevs(blkv=True,fltv=True)']

#underv = ['pass', \
#	'self.test=batdata.mincellv<2.90', \
#	'batdata.pip.setchargevs(lowv=48.0)', \
#	'self.test=batdata.mincellv>3.20', \
#	'batdata.pip.resetchargevs(lowv=True)']

#swapinverter swaps the inverter in two inverter setups to even out wear and save power
#swapinverter = ['pass', \
#	'self.test=localtime().tm_hour==18', \
#	'pass', \
#	'self.test=localtime().tm_hour==6', \
#	'pass']

#float gets around premature float bug in PIP
#float = ['batdata.pip.opensetparam("PBFT55.2")', \
#	'self.test=batdata.batvoltsav[16]>55.1 and batdata.currentav[0]>-3.6', \
#	'batdata.pip.opensetparam("PBFT53.6")', \
#	'self.test=localtime().tm_hour==0', \
#	'batdata.pip.opensetparam("PBFT55.2")']
